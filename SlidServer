local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local slidRemote = ReplicatedStorage:WaitForChild("SlidRemote")
 
local animationId = "rbxassetid://28442712"
local duracao, slideDist = 1.2, 20
local velocidadeMult = 2 -- 1 = normal, 2 = dobro da velocidade
 
local emUso = {}
 
local jointsNomes = {"Left Hip", "Right Hip", "Left Shoulder", "Right Shoulder", "Neck", "RootJoint"}
 
local function getJoints(char)
    local t = {}
    for _, nome in ipairs(jointsNomes) do
        t[nome] = (nome == "RootJoint") and char:FindFirstChild("HumanoidRootPart"):FindFirstChild(nome) or char:FindFirstChild("Torso"):FindFirstChild(nome)
        if not t[nome] then return nil end
    end
    return t
end
 
local function tweenJoints(joints, metas, tempo)
    for nome, joint in pairs(joints) do
        local tween = game:GetService("TweenService"):Create(joint, TweenInfo.new(tempo, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        C0 = metas[nome]
        })
        tween:Play()
    end
end
 
local function animar(humanoid, player)
    if emUso[player] then return end
    emUso[player] = true
    
    local char = humanoid.Parent
    if not (char and char:FindFirstChild("Torso") and char:FindFirstChild("HumanoidRootPart")) then
        emUso[player] = nil
        return
    end
    
    local joints = getJoints(char)
    if not joints then emUso[player] = nil return end
    
    local original = {}
    for nome, j in pairs(joints) do original[nome] = j.C0 end
    local oldSpeed = humanoid.WalkSpeed
    humanoid.WalkSpeed = 0
    
    local pose = {
    ["RootJoint"] = original.RootJoint * CFrame.new(0,0,-2) * CFrame.Angles(math.rad(-70),0,0),
    ["Left Hip"] = original["Left Hip"] * CFrame.new(-0.2,0,0),
    ["Right Hip"] = original["Right Hip"] * CFrame.new(1,0,0) * CFrame.Angles(0,0,-0.5),
    ["Left Shoulder"] = original["Left Shoulder"] * CFrame.Angles(0,0,math.rad(100)),
    ["Right Shoulder"] = original["Right Shoulder"] * CFrame.Angles(0,math.rad(40),math.rad(50)),
    ["Neck"] = original["Neck"] * CFrame.Angles(math.rad(45),0,0)
    }
    
    -- Carrega e toca a animação
    local anim = Instance.new("Animation")
    anim.AnimationId = animationId
    local track = humanoid:LoadAnimation(anim)
    track:Play()
    
    tweenJoints(joints, pose, duracao * 0.3)
    
    -- Aplicar BodyVelocity para o slide que atualiza com a direção do personagem
    local root = char.HumanoidRootPart
    local bv = Instance.new("BodyVelocity")
    bv.MaxForce = Vector3.new(1e5, 0, 1e5)
    bv.Parent = root
    
    local tempoSlide = duracao * 0.7
    local tempoDecorrido = 0
    local conn
    conn = RunService.Heartbeat:Connect(function(deltaTime)
        tempoDecorrido = tempoDecorrido + deltaTime
        bv.Velocity = root.CFrame.LookVector * (slideDist / duracao) * velocidadeMult
        
        if tempoDecorrido >= tempoSlide then
            conn:Disconnect()
        end
    end)
    
    task.wait(tempoSlide)
    
    bv:Destroy()
    
    tweenJoints(joints, original, duracao * 0.3)
    
    task.wait(duracao * 0.3)
    track:Stop()
    track:Destroy()
    humanoid.WalkSpeed = oldSpeed
    emUso[player] = nil
end
 
slidRemote.OnServerEvent:Connect(function(player)
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if hum then animar(hum, player) end
end)
