-- UI Library Guizin
local CollectionService = game:GetService("CollectionService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local GuizinLibrary = {}
GuizinLibrary.__index = GuizinLibrary

-- Configura√ß√µes
local CONFIG = {
    TWEEN_TIME = 0.3,
    COLORS = {
        ACTIVE = Color3.fromRGB(0, 255, 0),    -- Verde quando ativo
        INACTIVE = Color3.fromRGB(34, 34, 34), -- Preto quando inativo
        TAB_ACTIVE = Color3.fromRGB(100, 150, 255),
        TAB_INACTIVE = Color3.fromRGB(168, 168, 168)
    }
}

function GuizinLibrary.new(title)
    local self = setmetatable({}, GuizinLibrary)
    
    -- Estados
    self.isOpen = false
    self.currentTab = nil
    self.tabs = {}
    self.toggleStates = {}
    
    -- Criar GUI base
    self:createBaseGUI(title or "Guizinü•∂")
    
    return self
end

function GuizinLibrary:createBaseGUI(title)
    -- ScreenGui principal
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "Guizin"
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    CollectionService:AddTag(self.ScreenGui, "main")
    
    -- Toggle Button (sempre vis√≠vel)
    self.ToggleButton = Instance.new("TextButton")
    self.ToggleButton.Name = "Toggle Bot√£o"
    self.ToggleButton.Size = UDim2.new(0, 52, 0, 52)
    self.ToggleButton.Position = UDim2.new(0, 10, 0, 6)
    self.ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.ToggleButton.BackgroundTransparency = 0.4
    self.ToggleButton.Text = "ü§ë"
    self.ToggleButton.TextScaled = true
    self.ToggleButton.BorderSizePixel = 0
    self.ToggleButton.Parent = self.ScreenGui
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.Parent = self.ToggleButton
    
    -- Painel principal (inicialmente invis√≠vel)
    self.MainPanel = Instance.new("Frame")
    self.MainPanel.Name = "Painel"
    self.MainPanel.Size = UDim2.new(0, 314, 0, 246)
    self.MainPanel.Position = UDim2.new(0, 264, 0, 20)
    self.MainPanel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.MainPanel.BackgroundTransparency = 0.5
    self.MainPanel.BorderSizePixel = 0
    self.MainPanel.Visible = false
    self.MainPanel.Parent = self.ScreenGui
    
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0, 9)
    panelCorner.Parent = self.MainPanel
    
    -- Frame de fundo
    self.BackgroundFrame = Instance.new("Frame")
    self.BackgroundFrame.Size = UDim2.new(0, 342, 0, 276)
    self.BackgroundFrame.Position = UDim2.new(0, -14, 0, -14)
    self.BackgroundFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.BackgroundFrame.BackgroundTransparency = 0.5
    self.BackgroundFrame.BorderSizePixel = 0
    self.BackgroundFrame.Parent = self.MainPanel
    
    local bgCorner = Instance.new("UICorner")
    bgCorner.CornerRadius = UDim.new(0, 9)
    bgCorner.Parent = self.BackgroundFrame
    
    -- Bot√£o fechar
    self.CloseButton = Instance.new("TextButton")
    self.CloseButton.Name = "Fechar Bot√£o"
    self.CloseButton.Size = UDim2.new(0, 34, 0, 28)
    self.CloseButton.Position = UDim2.new(0, 302, 0, -14)
    self.CloseButton.BackgroundTransparency = 1
    self.CloseButton.Text = "X"
    self.CloseButton.TextColor3 = Color3.fromRGB(255, 4, 4)
    self.CloseButton.TextScaled = true
    self.CloseButton.FontFace = Font.new("rbxasset://fonts/families/DenkOne.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    self.CloseButton.BorderSizePixel = 0
    self.CloseButton.Parent = self.MainPanel
    
    -- T√≠tulo
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Name = "Title"
    self.TitleLabel.Size = UDim2.new(0, 314, 0, 24)
    self.TitleLabel.BackgroundTransparency = 1
    self.TitleLabel.Text = title
    self.TitleLabel.TextScaled = true
    self.TitleLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    self.TitleLabel.BorderSizePixel = 0
    self.TitleLabel.Parent = self.MainPanel
    
    -- Container principal
    self.Container = Instance.new("Frame")
    self.Container.Name = "Conterne"
    self.Container.Size = UDim2.new(0, 298, 0, 210)
    self.Container.Position = UDim2.new(0, 8, 0, 26)
    self.Container.BackgroundTransparency = 1
    self.Container.BorderSizePixel = 0
    self.Container.Parent = self.MainPanel
    
    local containerCorner = Instance.new("UICorner")
    containerCorner.CornerRadius = UDim.new(0, 9)
    containerCorner.Parent = self.Container
    
    -- Container das tabs
    self.TabsContainer = Instance.new("Frame")
    self.TabsContainer.Name = "Conterne Tabs"
    self.TabsContainer.Size = UDim2.new(0, 60, 0, 210)
    self.TabsContainer.BackgroundColor3 = Color3.fromRGB(65, 65, 65)
    self.TabsContainer.BackgroundTransparency = 0.9
    self.TabsContainer.BorderSizePixel = 0
    self.TabsContainer.Parent = self.Container
    
    local tabsCorner = Instance.new("UICorner")
    tabsCorner.CornerRadius = UDim.new(0, 9)
    tabsCorner.Parent = self.TabsContainer
    
    -- Container dos bot√µes/conte√∫do
    self.ContentContainer = Instance.new("Frame")
    self.ContentContainer.Name = "Conterne Bot√µes"
    self.ContentContainer.Size = UDim2.new(0, 228, 0, 210)
    self.ContentContainer.Position = UDim2.new(0, 70, 0, 0)
    self.ContentContainer.BackgroundColor3 = Color3.fromRGB(78, 78, 78)
    self.ContentContainer.BackgroundTransparency = 0.9
    self.ContentContainer.BorderSizePixel = 0
    self.ContentContainer.Parent = self.Container
    
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 9)
    contentCorner.Parent = self.ContentContainer
    
    -- Scroll para o conte√∫do
    self.ContentScroll = Instance.new("ScrollingFrame")
    self.ContentScroll.Size = UDim2.new(1, 0, 1, 0)
    self.ContentScroll.BackgroundTransparency = 1
    self.ContentScroll.ScrollBarThickness = 4
    self.ContentScroll.Parent = self.ContentContainer
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = self.ContentScroll
    
    -- Layout para as tabs
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 2)
    tabLayout.Parent = self.TabsContainer
    
    -- Conectar eventos
    self:connectEvents()
end

function GuizinLibrary:connectEvents()
    -- Toggle do painel
    self.ToggleButton.MouseButton1Click:Connect(function()
        self:togglePanel()
    end)
    
    -- Fechar painel
    self.CloseButton.MouseButton1Click:Connect(function()
        self:closePanel()
    end)
    
    -- Fechar com ESC
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Escape and self.isOpen then
            self:closePanel()
        end
    end)
end

function GuizinLibrary:togglePanel()
    if self.isOpen then
        self:closePanel()
    else
        self:openPanel()
    end
end

function GuizinLibrary:openPanel()
    self.isOpen = true
    self.MainPanel.Visible = true
    
    -- Anima√ß√£o de abertura
    local tween = TweenService:Create(
        self.MainPanel,
        TweenInfo.new(CONFIG.TWEEN_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Size = UDim2.new(0, 314, 0, 246)}
    )
    tween:Play()
end

function GuizinLibrary:closePanel()
    self.isOpen = false
    
    -- Anima√ß√£o de fechamento
    local tween = TweenService:Create(
        self.MainPanel,
        TweenInfo.new(CONFIG.TWEEN_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.In),
        {Size = UDim2.new(0, 0, 0, 0)}
    )
    
    tween.Completed:Connect(function()
        self.MainPanel.Visible = false
    end)
    tween:Play()
end

function GuizinLibrary:createTab(name)
    local tab = {
        name = name,
        button = nil,
        content = {},
        active = false
    }
    
    -- Criar bot√£o da tab
    tab.button = Instance.new("TextButton")
    tab.button.Name = "Tab_" .. name
    tab.button.Size = UDim2.new(0, 60, 0, 26)
    tab.button.BackgroundColor3 = CONFIG.COLORS.TAB_INACTIVE
    tab.button.Text = name
    tab.button.TextScaled = true
    tab.button.TextColor3 = Color3.fromRGB(255, 255, 255)
    tab.button.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    tab.button.BorderSizePixel = 0
    tab.button.Parent = self.TabsContainer
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.Parent = tab.button
    
    -- Evento da tab
    tab.button.MouseButton1Click:Connect(function()
        self:switchTab(name)
    end)
    
    self.tabs[name] = tab
    
    -- Se for a primeira tab, ativar
    if #self.TabsContainer:GetChildren() == 2 then -- 2 porque tem o UIListLayout
        self:switchTab(name)
    end
    
    return self:createTabAPI(name)
end

function GuizinLibrary:createTabAPI(tabName)
    local tabAPI = {}
    
    function tabAPI:addToggle(name, defaultState, callback)
        return self:addToggle(tabName, name, defaultState or false, callback)
    end
    
    function tabAPI:addButton(name, callback)
        return self:addButton(tabName, name, callback)
    end
    
    function tabAPI:addLabel(text)
        return self:addLabel(tabName, text)
    end
    
    return tabAPI
end

function GuizinLibrary:switchTab(tabName)
    -- Desativar tab atual
    if self.currentTab then
        local currentTab = self.tabs[self.currentTab]
        if currentTab then
            currentTab.active = false
            currentTab.button.BackgroundColor3 = CONFIG.COLORS.TAB_INACTIVE
        end
    end
    
    -- Ativar nova tab
    local newTab = self.tabs[tabName]
    if newTab then
        newTab.active = true
        newTab.button.BackgroundColor3 = CONFIG.COLORS.TAB_ACTIVE
        self.currentTab = tabName
        
        -- Limpar conte√∫do atual
        for _, child in pairs(self.ContentScroll:GetChildren()) do
            if child:IsA("GuiObject") then
                child:Destroy()
            end
        end
        
        -- Mostrar conte√∫do da tab
        for _, element in pairs(newTab.content) do
            element.Parent = self.ContentScroll
        end
        
        -- Atualizar tamanho do scroll
        self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, #newTab.content * 40)
    end
end

function GuizinLibrary:addToggle(tabName, name, defaultState, callback)
    local tab = self.tabs[tabName]
    if not tab then return end
    
    local toggleState = defaultState or false
    self.toggleStates[tabName .. "_" .. name] = toggleState
    
    -- Container do toggle
    local toggleContainer = Instance.new("Frame")
    toggleContainer.Name = name .. "_Container"
    toggleContainer.Size = UDim2.new(0, 228, 0, 34)
    toggleContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleContainer.BorderSizePixel = 0
    
    local containerCorner = Instance.new("UICorner")
    containerCorner.Parent = toggleContainer
    
    -- Label do toggle
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 180, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextScaled = true
    label.TextColor3 = Color3.fromRGB(0, 0, 0)
    label.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    label.Parent = toggleContainer
    
    -- Bot√£o toggle
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 38, 0, 34)
    toggleButton.Position = UDim2.new(0, 190, 0, 0)
    toggleButton.BackgroundColor3 = toggleState and CONFIG.COLORS.ACTIVE or CONFIG.COLORS.INACTIVE
    toggleButton.Text = ""
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = toggleContainer
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.Parent = toggleButton
    
    -- Evento do toggle
    toggleButton.MouseButton1Click:Connect(function()
        toggleState = not toggleState
        self.toggleStates[tabName .. "_" .. name] = toggleState
        
        -- Animar mudan√ßa de cor
        local tween = TweenService:Create(
            toggleButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = toggleState and CONFIG.COLORS.ACTIVE or CONFIG.COLORS.INACTIVE}
        )
        tween:Play()
        
        -- Callback
        if callback then
            callback(toggleState)
        end
    end)
    
    table.insert(tab.content, toggleContainer)
    
    -- Se esta tab estiver ativa, adicionar ao scroll
    if tab.active then
        toggleContainer.Parent = self.ContentScroll
        self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, #tab.content * 40)
    end
    
    return {
        getState = function()
            return self.toggleStates[tabName .. "_" .. name]
        end,
        setState = function(state)
            toggleState = state
            self.toggleStates[tabName .. "_" .. name] = state
            toggleButton.BackgroundColor3 = state and CONFIG.COLORS.ACTIVE or CONFIG.COLORS.INACTIVE
        end
    }
end

function GuizinLibrary:addButton(tabName, name, callback)
    local tab = self.tabs[tabName]
    if not tab then return end
    
    local button = Instance.new("TextButton")
    button.Name = name .. "_Button"
    button.Size = UDim2.new(0, 228, 0, 34)
    button.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
    button.Text = name
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    button.BorderSizePixel = 0
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.Parent = button
    
    button.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)
    
    table.insert(tab.content, button)
    
    if tab.active then
        button.Parent = self.ContentScroll
        self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, #tab.content * 40)
    end
end

function GuizinLibrary:addLabel(tabName, text)
    local tab = self.tabs[tabName]
    if not tab then return end
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(0, 228, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextSize = 12
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
    label.BorderSizePixel = 0
    
    local labelCorner = Instance.new("UICorner")
    labelCorner.Parent = label
    
    table.insert(tab.content, label)
    
    if tab.active then
        label.Parent = self.ContentScroll
        self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, #tab.content * 40)
    end
end

function GuizinLibrary:setTitle(newTitle)
    self.TitleLabel.Text = newTitle
end

function GuizinLibrary:destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return GuizinLibrary
